// 💡 전개구문
// 배열의 전개 구문
const 과일들 = ["사과", "파인애플", "수박"];
const 생선들 = ["조기", "갈치", "다금바리"];
const 합치면 = [...과일들, ...생선들];
const 합치면2 = [과일들, 생선들];

console.log(합치면); // [ '사과', '파인애플', '수박', '조기', '갈치', '다금바리' ]
console.log(합치면2); // [ [ '사과', '파인애플', '수박' ], [ '조기', '갈치', '다금바리' ] ]

// 객체의 전개 구문
const 위니브1 = { 개리: 1, 빙키: 2 };
const 위니브2 = { 라이캣: 3 };
const 위니브3 = { ...위니브1, ...위니브2 };

console.log(위니브3); // { '개리': 1, '빙키': 2, '라이캣': 3 }

const 위니브임직원 = {
  개리: "재직중",
  빙키: "재직중",
  라이켓: "재직중",
  뮤라: "재직중",
  해골왕: "재직중",
};

const 위니브임직원2 = {
  ...위니브임직원,
  라이켓: "휴가",
  해골왕: "퇴사",
};

const 위니브임직원3 = {
  ...위니브임직원,
};

// 💡 구조분해할당
for (const [i, j] of [
  [1, 2],
  [3, 4],
  [5, 6],
]) {
  console.log(i, j);
}
/*
1 2
3 4
5 6
*/

const 위니브임직원4 = {
  개리: "재직중",
  빙키: "재직중",
  라이켓: "재직중",
  뮤라: "재직중",
  해골왕: "재직중",
};

// Object.entries: 지정된 객체를 [key, value] 쌍의 배열로 반환한다.
for (const [i, j] of Object.entries(위니브임직원4)) {
  console.log(i, j);
  /*
		개리 재직중
		빙키 재직중
		라이켓 재직중
		뮤라 재직중
		해골왕 재직중
	*/
}

///////////////////////////////

let [a, b] = [10, 20];
let [one, two, three] = "010-1234-5678".split("-");
let [four, five, ...six] = "010-1234-5678-123-456".split("-");

//////////////////////////////

const test1 = [
  [1, 2, [10, 20]],
  [3, 4, [30, 40]],
  [5, 6, [50, 60]],
];

for (const [i, j] of test1) {
  console.log(i, j);
  /*
	1 2
	3 4
	5 6
	*/
}

const test2 = [
  [1, 2, [10, 20]],
  [3, 4, [30, 40]],
  [5, 6, [50, 60]],
];

for (const [i, j, k] of test1) {
  console.log(i, j, k);
  /*
	1 2 [ 10, 20 ]
	3 4 [ 30, 40 ]
	5 6 [ 50, 60 ]
	*/
}

const test3 = [
  [1, 2, [10, 20]],
  [3, 4, [30, 40]],
  [5, 6, [50, 60]],
];

for (const [i, j, [k, l]] of test1) {
  console.log(i, j, k, l);
  /*
	1 2 10 20
	3 4 30 40
	5 6 50 60
	*/
}

const test4 = [
  [1, 2, 10, 20],
  [3, 4, 30, 40],
  [5, 6, 50, 60],
];

for (const [i, j, ...k] of test1) {
  console.log(i, j, k);
  /*
	1 2 [ [ 10, 20 ] ]
	3 4 [ [ 30, 40 ] ]
	5 6 [ [ 50, 60 ] ]
	*/
}

// 💡 함수에서의 구조분해할당

function hello(a, b, ...c) {
  console.log(a, b, c);
}

hello(1, 2, 3, 4, 5, 6, 7);
// 1, 2, [3, 4, 5, 6, 7]
